{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! Welcome to the the RESTify Exercises . In this tutorial I will ask you to RESTify two tiny java applications (convert to a RESTful service). The chronological order is: Quick verification that all software you need is installed. Textual and video illustration of the two tasks on a third sample application. Two test applications to convert to a REST service: Tic Tac Toe (Xox) The Book Store Unit Tests to validate your solution. If anything does not work, or if you have questions, please use the EdSteam discussion board.","title":"Welcome"},{"location":"#welcome","text":"Welcome to the the RESTify Exercises . In this tutorial I will ask you to RESTify two tiny java applications (convert to a RESTful service). The chronological order is: Quick verification that all software you need is installed. Textual and video illustration of the two tasks on a third sample application. Two test applications to convert to a REST service: Tic Tac Toe (Xox) The Book Store Unit Tests to validate your solution. If anything does not work, or if you have questions, please use the EdSteam discussion board.","title":"Welcome!"},{"location":"diagram-bookstore/","text":"Legacy Application Details Below diagram highlights classes and methods of the legacy Book Store application , relevant to your RESTification task. For more information on theses methods, also consult the Book Store online documentation .","title":"Diagram bookstore"},{"location":"diagram-bookstore/#legacy-application-details","text":"Below diagram highlights classes and methods of the legacy Book Store application , relevant to your RESTification task. For more information on theses methods, also consult the Book Store online documentation .","title":"Legacy Application Details"},{"location":"diagram-xox/","text":"Legacy Application Details Below diagram highlights classes and methods of the legacy Tic Tac Toe application , relevant to your RESTification task. For more information on theses methods, also consult the Tic Tac Toe online documentation .","title":"Diagram xox"},{"location":"diagram-xox/#legacy-application-details","text":"Below diagram highlights classes and methods of the legacy Tic Tac Toe application , relevant to your RESTification task. For more information on theses methods, also consult the Tic Tac Toe online documentation .","title":"Legacy Application Details"},{"location":"illustrations/","text":"Sample refactoring to a RESTful service Before you start modifying the provided code, here is a short illustration of your upcoming tasks. Task Illustration In both of your tasks you will convert an existing java application to a RESTful service. This activity is also called RESTify or RESTification . A REST application is a service that exposes functionality over a a network protocol: The service creates the illusion of offering all functionality through CRUD operations on resources. This is a bit like file system access where you can C reate, R ead, U pdate or D elete files. However, access is not through a file system, but though the HTTP protocol. A resource is identified by its URL (*Unique Resource Location). It looks e.g. like this: http://127.0.0.1:8080/zoo/animals http specifies the protocol to reach this resource 127.0.0.1:8080 sets physical location of the target machine and the port running the REST service. zoo/animals is the location of a resource, offered by the running REST service. A REST interface is always an abstraction of the actual implementation, and should not be confused with RMI ( Remote Method Invocation ) where existing methods are called as-they-are over network. At the start of each task I will provide you with the tools for this process and illustrate the requests activity on a sample application, the Zoo . The Sample Application (Zoo) The Zoo is a minimal java desktop application that offers some demo functionality, namely: Looking up the Zoo's opening hours. Looking up all names of Zoo animals. Looking up details for a specific animal, identified by name. Adding a new animal to the Zoo. The above functionality is all provided by a singleton class: Zoo . For convenience, here is a class diagram of the Zoo class: You can also inspect the DesktopLauncher , to see how to invoke above methods. Finally you can also run the provided Zoo implementation as is, to see a demo of above functionality: Open a terminal in your cloned Zoo project Type: mvn clean package exec:java The Zoo REST interface description The RESTification of an application (e.g. the Zoo) requires an interface description. An interface description tells you: The expected arrangement of REST resources, and also their individual locations. Which methods ( Get , Put , Post , Delete ) are supported per resource. What happens when a REST resource method was called, and how required parameters are provided. For example for the Zoo the interface description could look like this: Your interface should begin with a top-level resource \" zoo \", not offering any methods. \" zoo \" should have two subresources, \" animals \" and \" openinghours \", both offering a [GET] method. A [GET] request to \"animals\" should return the list of all animal names in the zoo. A [GET] request to \" openinghours \" should return a description of the zoo's opening hours during the week and on weekends. The \" animals \" resource should have a single dynamic placeholder subresource representing a specific animal, identified by name. Name it e.g. \" animalname \". This dynamic subresource should offer a [Get] and a [Put] method. A [GET] request to the dynamic placeholder subresource should provide details on the given animal, identified by the value of the dynamic resource, i.e., the name of the animal (which serves as input parameter). A [PUT] request to the dynamic placeholder subresource should allow adding a new animal to the zoo. The name of the new animal is again specified by the value of the dynamic resource, while further details on the animal are passed as request body payload. Your task will be to formalize the provided interface description, and establish a semantic mapping on existing functionality and parameters. It's a good practice to have the textual description open throughout your task. For your convenience the Zoo description also is available as separate file (as will be the case for the descriptions you'll work with throughout your tasks). RESTifying the Zoo I will now illustrate the steps of a manual conversion to a RESTful service on the example of the Zoo. I will use the previously shown Zoo REST interface description . Afterwards, your task will be to apply the same methodology on a different application. Your task is not to replicate the Zoo conversion while you are watching. Please watch this screencast where I demonstrate and explain the required code changes. Below you find a summary of the main steps. If anything does not work as expected, take a look at the Troubleshoot section . Additionally you can conveniently inspect both versions and the changes made: Switch to Desktop Zoo version: git checkout master or inspect code online . Switch to RESTified Zoo version: git checkout RESTified or inspect code online . Compare versions: git diff master..RESTified or inspect changes online . Project Layout Overview A manual RESTification is a series of five activities: Loading of legacy sources into Integrated Development Environment (IntelliJ IDE) Adjustment of the build configuration file: pom.xml Replacement of the launcher class Removal of singleton pattern or creation of proxy controllers Decoration of REST controllers and target functions with Spring annotations Loading Legacy Sources into IDE Start IntelliJ. Use the \" Open \" option to get to the selection dialogue: Select the cloned project root folder, then click the \" Open \" button: Build Configuration Changes Want to see all Zoo-RESTify pom.xml changes at a glance? Run git diff master..RESTified pom.xml . Green lines were added for RESTification, red lines were removed. Artifact properties: Adjust artifactId . Change suffix to \"restified\" Adjust name . Change suffix to \"restified\" Update developer information: Remove the email and organizationUrl lines Change name to your name, e.g. \" max schiedermeier \" Change organization to \" mcgill.ca \" Parent: Declare inheritance from spring boot parent. Place below snippet right after the <license>...</license> block: <!-- this parent block lets this maven project extend a prepared spring specific template.--> <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 2.3.0.RELEASE </version> </parent> Dependencies: Declare dependency towards spring boot artifact: <!-- This block adds spring boot as a dependency, so we can use the parent pom configuration and non-standard annotations.--> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <version> 2.3.0.RELEASE </version> </dependency> Final Name Add \"Restified\" as suffix to the finalName attribute value Build plugins: Remove plugin for legacy launcher class: <!-- specify main class for exec goal --> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> exec-maven-plugin </artifactId> <version> 1.6.0 </version> <executions> <execution> <goals> <goal> java </goal> </goals> </execution> </executions> <configuration> <mainClass> eu.kartoffelquadrat.zoo.DesktopLauncher </mainClass> </configuration> </plugin> Remove plugin for legacy compilation to self contained JAR: <!-- specify main class for JAR manifest--> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-jar-plugin </artifactId> <version> 3.2.0 </version> <configuration> <archive> <manifest> <mainClass> eu.kartoffelquadrat.zoo.DesktopLauncher </mainClass> </manifest> </archive> </configuration> </plugin> Add plugin for spring-boot launcher class: (Don't create the new launcher class yet!) Don't forget to adapt the mainClass tag! <!-- Spring specific build plugin, produces self contained JAR with default launcher class.--> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> <configuration> <fork> true </fork> <!-- Replace \"zoo\" by actual package name in next line! --> <mainClass> eu.kartoffelquadrat.zoo.RestLauncher </mainClass> </configuration> <executions> <execution> <goals> <goal> repackage </goal> </goals> </execution> </executions> </plugin> Note: Some changes might note take full effect until you manually reload the pom.xml file. To do so, right click the pom.xml file and select: Maven -> Reload Project Java Code Changes Hint : You can use git to see all java changes made to the Zoo for manual RESTification. Run: git diff master..RESTified *java Green lines were added for RESTification, red lines were removed. Remove conflicting files You have to delete two things: The legacy launcher, located in src/main/java/eu/karotffelquadrat/*/DesktopLauncher.java The legacy unit tests. Remove the entire test folder: src/test (This part has been skipped in the Zoo explanatory video, since there were no test classes) Launcher First thing to do is the creation of a new launcher class. It should be placed anywhere within the src/main/java/eu/kartoffelquadrat/... directory. Create it by right clicking on the eu.kartoffelquadrat... package: Enter RestLauncher as class name, do not type the .java extension. IntelliJ will handle that for you. Code of the RestLauncher.java class. (Replaces the legacy launcher) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package eu.kartoffelquadrat.zoo ; <----- Replace \"zoo\" by whatever application you are working on import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; /** * This class powers up Spring and ensures the annotated controllers are detected. */ @SpringBootApplication public class RestLauncher { public static void main ( String [] args ) { SpringApplication . run ( RestLauncher . class , args ); } } Beans and Singletons Spring creates new instances of classes annotated with: @RestController The existing singleton pattern is bypassed, since Spring uses reflection to gain constructor access, even if the declared constructor is private. Having both @RestController and a getInstance method in the same class is dangerous. There are two ways to side-step inconsistency issues: Autowiring (Recommended) Proxy Classes If you chose Autowiring , you do not create new classes. You directly annotate the relevant existing classes with @RestController . This tells Spring to create one instance per annotated class, using a default constructor. Any existing singleton pattern is therefore obsolete: If you annotated a class with @RestController , make sure to remove the singleton pattern (the getInstance method) and make the default constructor public. Whenever an instance of such an annotated class is required, you can obtain the spring maintained instance with @Autowired . Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package eu.kartoffelquadrat.zoo ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.web.bind.annotation.RestController ; @RestController public class FooController { /* @Autowired ensures the zoo field is set after instantiation of FooController, given Zoo is annotated with @RestController. */ @Autowired Zoo zoo ; public void bar () { // Here you can access the zoo instance using the local, autowired field (instead of calling the obsolete getInstance method) zoo . getOpeningHours (); } } Autowired fields are only accessible after class instantiation. Do not invoke methods that require autowired values from a constructor, or you will get a NullPointerException at runtime. Instead annotate those methods with @PostConstruct . This advises spring to invoke a method after class instantiation. If you chose Proxy Classes , you do annotate the existing classes. You instead replicate every existing relevant class and place all annotations in the replica. The replica acts as proxy that forwards every method call to the original, using getInstance() . Keep the singleton pattern in the original java classes. They remain untouched. Instead place an @RestController annotation in every proxy class created. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package eu.kartoffelquadrat.zoo ; import org.springframework.web.bind.annotation.RestController ; /** This Proxy class is decorated with @RestController, instead of the original singleton class. Any required method of the original class can be proxied with an internal getInstance call. */ @RestController public class ZooController { /** Proxied access to a method of the original / singleton class . // Mapping annotation goes here . public OpeningHours getOpeningHours () { // Access to the original class is achieved with a call to getInstance. return Zoo . getInstance (). getOpeningHours (); } } Resource Mapping with Annotations Note: Below annotation syntax can only be used in classes annotated with @RestController . Resource mappings (these annotations decorate functions) Annotations types: Get Put Post Delete @GetMapping(\"...\") @PutMapping(\"...\") @PostMapping(\"...\") @DeleteMapping(\"...\") Arguments: Static: Full resource path within quotes, e.g.: \"zoo/animals\" Dynamic: Full resource path within quotes. Any dynamic placeholder on path is marked by curly brackets , e.g.: \"zoo/animals/{animalname}\" Parameter mapping (these annotations decorate function parameters) Pathvariable: @PathVariable(\"animalname\") Request body: @RequestBody Build and Run These instructions are to build and run from command line. While developing in IntelliJ you can safly use the \"green triangle button\" next to your new spring launcher class. The first time you start your REST application you might see a warning about incoming connections. Select \" Allow \". At some point you also need to build your application into a self contained artifact: Mac OS / Linux Windows Build a self contained executable jar file: mvn clean package Run the jar file: java -jar target/zoorestified.jar zoorestified is the name you provided as finalName in your pom.xml . Build a self contained executable jar file: mvn clean package Run the jar file: java -jar target\\zoorestified.jar zoorestified is the name you provided as finalName in your pom.xml . Compile and Test To compile and test your produced REST service: Compile your project with: mvn clean package Open the newly generated target folder. Run the generated JAR file with: java -jar YOUR-SERVICE-NAME.jar Test access with your browser. You can directly access any [GET] resource by typing this into the URL bar: http://127.0.0.1:8080/zoo/animals (where zoo/animals is replaced by a valid GET-enabled resource of your application) Troubleshoot Q : I open the project with IntelliJ, but everything is underlined in red. A : The projet was not correctly opened. There are multiple potential fixes: Option 1) Reload pom.xml : Right click the file, then select Maven -> Reload Project . Option 2) Verify the JDK version: Select File -> Project Structure... . Verify 11.0.5 is selected in the Project and SDKs tab: Option 3) Invalidate IntelliJ caches: Select File -> Invalidate Caches... . Then select the first two checkboxes: Option 4) Delete the cloned folder, clone the repository again, then make sure to open the project exactly as shown . Q : I cannot compile / run the project, the green button is greyed out. A : The project has no launch configuration by default, therefore the arrow in the top bar is not available. Open the RestLauncher class instead and click on one of the green triangles, left of the code. Q : I RESTified the application, but when I start it there is a Nullpointer-Exception. A : Most likely the constructor code in one of the classes annotated with @RestController invokes a call to an @Autowired field. Autowiring is only available after class initialization (after the constructor). Do not call any method with access to autowired fields in a constructor. Instead tell spring to call it after class initialization. Use the @PostConstruct annotation. See @PostConstruct . Q : I've made a mistake on project import, how can I start from scratch? Delete the cloned folder, clone the repository again, then make sure to open the project exactly as shown . Q : I've modified the pom.xml file as shown, but IntelliJ still does not seem to know about Spring. A : Sometimes the changes made to the pom.xml are not automatically detected. (See first question, pom.xml reload```.) Q : IntelliJ asks me whether I want to trust the project sources. Should I? A : Yes. This is just a security mechanism to prevent malicious code being executed on project import. The provided sources are all from us and can be trusted.","title":"Task Illustration"},{"location":"illustrations/#sample-refactoring-to-a-restful-service","text":"Before you start modifying the provided code, here is a short illustration of your upcoming tasks.","title":"Sample refactoring to a RESTful service"},{"location":"illustrations/#task-illustration","text":"In both of your tasks you will convert an existing java application to a RESTful service. This activity is also called RESTify or RESTification . A REST application is a service that exposes functionality over a a network protocol: The service creates the illusion of offering all functionality through CRUD operations on resources. This is a bit like file system access where you can C reate, R ead, U pdate or D elete files. However, access is not through a file system, but though the HTTP protocol. A resource is identified by its URL (*Unique Resource Location). It looks e.g. like this: http://127.0.0.1:8080/zoo/animals http specifies the protocol to reach this resource 127.0.0.1:8080 sets physical location of the target machine and the port running the REST service. zoo/animals is the location of a resource, offered by the running REST service. A REST interface is always an abstraction of the actual implementation, and should not be confused with RMI ( Remote Method Invocation ) where existing methods are called as-they-are over network. At the start of each task I will provide you with the tools for this process and illustrate the requests activity on a sample application, the Zoo .","title":"Task Illustration"},{"location":"illustrations/#the-sample-application-zoo","text":"The Zoo is a minimal java desktop application that offers some demo functionality, namely: Looking up the Zoo's opening hours. Looking up all names of Zoo animals. Looking up details for a specific animal, identified by name. Adding a new animal to the Zoo. The above functionality is all provided by a singleton class: Zoo . For convenience, here is a class diagram of the Zoo class: You can also inspect the DesktopLauncher , to see how to invoke above methods. Finally you can also run the provided Zoo implementation as is, to see a demo of above functionality: Open a terminal in your cloned Zoo project Type: mvn clean package exec:java","title":"The Sample Application (Zoo)"},{"location":"illustrations/#the-zoo-rest-interface-description","text":"The RESTification of an application (e.g. the Zoo) requires an interface description. An interface description tells you: The expected arrangement of REST resources, and also their individual locations. Which methods ( Get , Put , Post , Delete ) are supported per resource. What happens when a REST resource method was called, and how required parameters are provided. For example for the Zoo the interface description could look like this: Your interface should begin with a top-level resource \" zoo \", not offering any methods. \" zoo \" should have two subresources, \" animals \" and \" openinghours \", both offering a [GET] method. A [GET] request to \"animals\" should return the list of all animal names in the zoo. A [GET] request to \" openinghours \" should return a description of the zoo's opening hours during the week and on weekends. The \" animals \" resource should have a single dynamic placeholder subresource representing a specific animal, identified by name. Name it e.g. \" animalname \". This dynamic subresource should offer a [Get] and a [Put] method. A [GET] request to the dynamic placeholder subresource should provide details on the given animal, identified by the value of the dynamic resource, i.e., the name of the animal (which serves as input parameter). A [PUT] request to the dynamic placeholder subresource should allow adding a new animal to the zoo. The name of the new animal is again specified by the value of the dynamic resource, while further details on the animal are passed as request body payload. Your task will be to formalize the provided interface description, and establish a semantic mapping on existing functionality and parameters. It's a good practice to have the textual description open throughout your task. For your convenience the Zoo description also is available as separate file (as will be the case for the descriptions you'll work with throughout your tasks).","title":"The Zoo REST interface description"},{"location":"illustrations/#restifying-the-zoo","text":"I will now illustrate the steps of a manual conversion to a RESTful service on the example of the Zoo. I will use the previously shown Zoo REST interface description . Afterwards, your task will be to apply the same methodology on a different application. Your task is not to replicate the Zoo conversion while you are watching. Please watch this screencast where I demonstrate and explain the required code changes. Below you find a summary of the main steps. If anything does not work as expected, take a look at the Troubleshoot section . Additionally you can conveniently inspect both versions and the changes made: Switch to Desktop Zoo version: git checkout master or inspect code online . Switch to RESTified Zoo version: git checkout RESTified or inspect code online . Compare versions: git diff master..RESTified or inspect changes online .","title":"RESTifying the Zoo"},{"location":"illustrations/#project-layout-overview","text":"A manual RESTification is a series of five activities: Loading of legacy sources into Integrated Development Environment (IntelliJ IDE) Adjustment of the build configuration file: pom.xml Replacement of the launcher class Removal of singleton pattern or creation of proxy controllers Decoration of REST controllers and target functions with Spring annotations","title":"Project Layout Overview"},{"location":"illustrations/#loading-legacy-sources-into-ide","text":"Start IntelliJ. Use the \" Open \" option to get to the selection dialogue: Select the cloned project root folder, then click the \" Open \" button:","title":"Loading Legacy Sources into IDE"},{"location":"illustrations/#build-configuration-changes","text":"Want to see all Zoo-RESTify pom.xml changes at a glance? Run git diff master..RESTified pom.xml . Green lines were added for RESTification, red lines were removed. Artifact properties: Adjust artifactId . Change suffix to \"restified\" Adjust name . Change suffix to \"restified\" Update developer information: Remove the email and organizationUrl lines Change name to your name, e.g. \" max schiedermeier \" Change organization to \" mcgill.ca \" Parent: Declare inheritance from spring boot parent. Place below snippet right after the <license>...</license> block: <!-- this parent block lets this maven project extend a prepared spring specific template.--> <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 2.3.0.RELEASE </version> </parent> Dependencies: Declare dependency towards spring boot artifact: <!-- This block adds spring boot as a dependency, so we can use the parent pom configuration and non-standard annotations.--> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <version> 2.3.0.RELEASE </version> </dependency> Final Name Add \"Restified\" as suffix to the finalName attribute value Build plugins: Remove plugin for legacy launcher class: <!-- specify main class for exec goal --> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> exec-maven-plugin </artifactId> <version> 1.6.0 </version> <executions> <execution> <goals> <goal> java </goal> </goals> </execution> </executions> <configuration> <mainClass> eu.kartoffelquadrat.zoo.DesktopLauncher </mainClass> </configuration> </plugin> Remove plugin for legacy compilation to self contained JAR: <!-- specify main class for JAR manifest--> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-jar-plugin </artifactId> <version> 3.2.0 </version> <configuration> <archive> <manifest> <mainClass> eu.kartoffelquadrat.zoo.DesktopLauncher </mainClass> </manifest> </archive> </configuration> </plugin> Add plugin for spring-boot launcher class: (Don't create the new launcher class yet!) Don't forget to adapt the mainClass tag! <!-- Spring specific build plugin, produces self contained JAR with default launcher class.--> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> <configuration> <fork> true </fork> <!-- Replace \"zoo\" by actual package name in next line! --> <mainClass> eu.kartoffelquadrat.zoo.RestLauncher </mainClass> </configuration> <executions> <execution> <goals> <goal> repackage </goal> </goals> </execution> </executions> </plugin> Note: Some changes might note take full effect until you manually reload the pom.xml file. To do so, right click the pom.xml file and select: Maven -> Reload Project","title":"Build Configuration Changes"},{"location":"illustrations/#java-code-changes","text":"Hint : You can use git to see all java changes made to the Zoo for manual RESTification. Run: git diff master..RESTified *java Green lines were added for RESTification, red lines were removed.","title":"Java Code Changes"},{"location":"illustrations/#remove-conflicting-files","text":"You have to delete two things: The legacy launcher, located in src/main/java/eu/karotffelquadrat/*/DesktopLauncher.java The legacy unit tests. Remove the entire test folder: src/test (This part has been skipped in the Zoo explanatory video, since there were no test classes)","title":"Remove conflicting files"},{"location":"illustrations/#launcher","text":"First thing to do is the creation of a new launcher class. It should be placed anywhere within the src/main/java/eu/kartoffelquadrat/... directory. Create it by right clicking on the eu.kartoffelquadrat... package: Enter RestLauncher as class name, do not type the .java extension. IntelliJ will handle that for you. Code of the RestLauncher.java class. (Replaces the legacy launcher) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package eu.kartoffelquadrat.zoo ; <----- Replace \"zoo\" by whatever application you are working on import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; /** * This class powers up Spring and ensures the annotated controllers are detected. */ @SpringBootApplication public class RestLauncher { public static void main ( String [] args ) { SpringApplication . run ( RestLauncher . class , args ); } }","title":"Launcher"},{"location":"illustrations/#beans-and-singletons","text":"Spring creates new instances of classes annotated with: @RestController The existing singleton pattern is bypassed, since Spring uses reflection to gain constructor access, even if the declared constructor is private. Having both @RestController and a getInstance method in the same class is dangerous. There are two ways to side-step inconsistency issues: Autowiring (Recommended) Proxy Classes If you chose Autowiring , you do not create new classes. You directly annotate the relevant existing classes with @RestController . This tells Spring to create one instance per annotated class, using a default constructor. Any existing singleton pattern is therefore obsolete: If you annotated a class with @RestController , make sure to remove the singleton pattern (the getInstance method) and make the default constructor public. Whenever an instance of such an annotated class is required, you can obtain the spring maintained instance with @Autowired . Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package eu.kartoffelquadrat.zoo ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.web.bind.annotation.RestController ; @RestController public class FooController { /* @Autowired ensures the zoo field is set after instantiation of FooController, given Zoo is annotated with @RestController. */ @Autowired Zoo zoo ; public void bar () { // Here you can access the zoo instance using the local, autowired field (instead of calling the obsolete getInstance method) zoo . getOpeningHours (); } } Autowired fields are only accessible after class instantiation. Do not invoke methods that require autowired values from a constructor, or you will get a NullPointerException at runtime. Instead annotate those methods with @PostConstruct . This advises spring to invoke a method after class instantiation. If you chose Proxy Classes , you do annotate the existing classes. You instead replicate every existing relevant class and place all annotations in the replica. The replica acts as proxy that forwards every method call to the original, using getInstance() . Keep the singleton pattern in the original java classes. They remain untouched. Instead place an @RestController annotation in every proxy class created. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package eu.kartoffelquadrat.zoo ; import org.springframework.web.bind.annotation.RestController ; /** This Proxy class is decorated with @RestController, instead of the original singleton class. Any required method of the original class can be proxied with an internal getInstance call. */ @RestController public class ZooController { /** Proxied access to a method of the original / singleton class . // Mapping annotation goes here . public OpeningHours getOpeningHours () { // Access to the original class is achieved with a call to getInstance. return Zoo . getInstance (). getOpeningHours (); } }","title":"Beans and Singletons"},{"location":"illustrations/#resource-mapping-with-annotations","text":"Note: Below annotation syntax can only be used in classes annotated with @RestController . Resource mappings (these annotations decorate functions) Annotations types: Get Put Post Delete @GetMapping(\"...\") @PutMapping(\"...\") @PostMapping(\"...\") @DeleteMapping(\"...\") Arguments: Static: Full resource path within quotes, e.g.: \"zoo/animals\" Dynamic: Full resource path within quotes. Any dynamic placeholder on path is marked by curly brackets , e.g.: \"zoo/animals/{animalname}\" Parameter mapping (these annotations decorate function parameters) Pathvariable: @PathVariable(\"animalname\") Request body: @RequestBody","title":"Resource Mapping with Annotations"},{"location":"illustrations/#build-and-run","text":"These instructions are to build and run from command line. While developing in IntelliJ you can safly use the \"green triangle button\" next to your new spring launcher class. The first time you start your REST application you might see a warning about incoming connections. Select \" Allow \". At some point you also need to build your application into a self contained artifact: Mac OS / Linux Windows Build a self contained executable jar file: mvn clean package Run the jar file: java -jar target/zoorestified.jar zoorestified is the name you provided as finalName in your pom.xml . Build a self contained executable jar file: mvn clean package Run the jar file: java -jar target\\zoorestified.jar zoorestified is the name you provided as finalName in your pom.xml .","title":"Build and Run"},{"location":"illustrations/#compile-and-test","text":"To compile and test your produced REST service: Compile your project with: mvn clean package Open the newly generated target folder. Run the generated JAR file with: java -jar YOUR-SERVICE-NAME.jar Test access with your browser. You can directly access any [GET] resource by typing this into the URL bar: http://127.0.0.1:8080/zoo/animals (where zoo/animals is replaced by a valid GET-enabled resource of your application)","title":"Compile and Test"},{"location":"illustrations/#troubleshoot","text":"Q : I open the project with IntelliJ, but everything is underlined in red. A : The projet was not correctly opened. There are multiple potential fixes: Option 1) Reload pom.xml : Right click the file, then select Maven -> Reload Project . Option 2) Verify the JDK version: Select File -> Project Structure... . Verify 11.0.5 is selected in the Project and SDKs tab: Option 3) Invalidate IntelliJ caches: Select File -> Invalidate Caches... . Then select the first two checkboxes: Option 4) Delete the cloned folder, clone the repository again, then make sure to open the project exactly as shown . Q : I cannot compile / run the project, the green button is greyed out. A : The project has no launch configuration by default, therefore the arrow in the top bar is not available. Open the RestLauncher class instead and click on one of the green triangles, left of the code. Q : I RESTified the application, but when I start it there is a Nullpointer-Exception. A : Most likely the constructor code in one of the classes annotated with @RestController invokes a call to an @Autowired field. Autowiring is only available after class initialization (after the constructor). Do not call any method with access to autowired fields in a constructor. Instead tell spring to call it after class initialization. Use the @PostConstruct annotation. See @PostConstruct . Q : I've made a mistake on project import, how can I start from scratch? Delete the cloned folder, clone the repository again, then make sure to open the project exactly as shown . Q : I've modified the pom.xml file as shown, but IntelliJ still does not seem to know about Spring. A : Sometimes the changes made to the pom.xml are not automatically detected. (See first question, pom.xml reload```.) Q : IntelliJ asks me whether I want to trust the project sources. Should I? A : Yes. This is just a security mechanism to prevent malicious code being executed on project import. The provided sources are all from us and can be trusted.","title":"Troubleshoot"},{"location":"preliminaries/","text":"Preliminaries Software Let's first check that you have all required software installed on your machine. Java You will need Java, version 11.0.5 or newer will work. * Verify your java version with java -version * If the output is not 11.0.5 or newer , install it: Mac OS Linux Windows Download the JDK 11.0.5 MacOS package . Double click the downloaded .pkg file. Follow the install instructions. Download the JDK 11.0.5 Linux package . Extract the file: tar xvf *.tar.gz Add the contained commands to your path : Set the JAVA_HOME and update your PATH in your ~/.bashrc file: Extend path: PATH=$PATH:/wherever/you/extracted/it/jdk-.../bin/ Set java home: JAVA_HOME=/wherever/you/extracted/it/jdk-... Open a new terminal or type: source ~/.bashrc Download the JDK 11.0.5 MSI or ZIP installer. Double click the downloaded file. Follow the install instructions. After installation , verify that 11.0.5 is now the default installed version . Type again: java -version , check the output. Maven You will need the java build tool Maven . Test if your system has the mvn command. If missing, install it: Mac OS Linux Windows Unless already installed, get the brew package manager . Install maven: brew install maven Use the apt package manager to install maven: sudo apt install maven Download the graphical install wizard . Double click it and follow the instructions. IntelliJ Any IDE can be used, but we strongly recommend IntelliJ. Also further instructions and guides on this page are exclusively for IntelliJ. Download and install IntelliJ . The community version is sufficient. If desired you can also use the ultimate version (registration with mcgill email required). Applications This section describes how to obtain source code and prepared TouchCORE models for the study objects. Source Code For the upcoming two tasks you will need prepared source code to work on. Prepare a dedicated folder for your tasks, e.g. on your Desktop. Clone these three repositories, but do not yet inspect their content: The Zoo : git clone https://github.com/kartoffelquadrat/Zoo.git The Book Store : git clone https://github.com/kartoffelquadrat/BookStoreInternals.git Tic Tac Toe : git clone https://github.com/kartoffelquadrat/XoxInternals.git You should now have three new directories in your study folder: Finally, for each folder, verify you can build the code as is: Open a terminal / command line in the project folder. Run: mvn clean install Verify there are no error messages printed to screen. All code you are working with in this study is open source, and you are welcome to share and redistribute it, beyond the context of this study. However, whatever published should always reference and give credit to the original source and authors. IntelliJ Import Test Let's verify that you can open and run the test source code with IntelliJ: Start IntelliJ. Use the \" Open \" option to get to the selection dialogue: Select the cloned project root folder, then click the \" Open \" button: Verify you can start the \"Zoo\". Open the DesktopLauncher class and click the green triangle, left of the code: Verify there is sample zoo text output, no error messages. Close IntelliJ again. If everything worked as expected you may now proceed to your first task.","title":"Preliminaries"},{"location":"preliminaries/#preliminaries","text":"","title":"Preliminaries"},{"location":"preliminaries/#software","text":"Let's first check that you have all required software installed on your machine.","title":"Software"},{"location":"preliminaries/#java","text":"You will need Java, version 11.0.5 or newer will work. * Verify your java version with java -version * If the output is not 11.0.5 or newer , install it: Mac OS Linux Windows Download the JDK 11.0.5 MacOS package . Double click the downloaded .pkg file. Follow the install instructions. Download the JDK 11.0.5 Linux package . Extract the file: tar xvf *.tar.gz Add the contained commands to your path : Set the JAVA_HOME and update your PATH in your ~/.bashrc file: Extend path: PATH=$PATH:/wherever/you/extracted/it/jdk-.../bin/ Set java home: JAVA_HOME=/wherever/you/extracted/it/jdk-... Open a new terminal or type: source ~/.bashrc Download the JDK 11.0.5 MSI or ZIP installer. Double click the downloaded file. Follow the install instructions. After installation , verify that 11.0.5 is now the default installed version . Type again: java -version , check the output.","title":"Java"},{"location":"preliminaries/#maven","text":"You will need the java build tool Maven . Test if your system has the mvn command. If missing, install it: Mac OS Linux Windows Unless already installed, get the brew package manager . Install maven: brew install maven Use the apt package manager to install maven: sudo apt install maven Download the graphical install wizard . Double click it and follow the instructions.","title":"Maven"},{"location":"preliminaries/#intellij","text":"Any IDE can be used, but we strongly recommend IntelliJ. Also further instructions and guides on this page are exclusively for IntelliJ. Download and install IntelliJ . The community version is sufficient. If desired you can also use the ultimate version (registration with mcgill email required).","title":"IntelliJ"},{"location":"preliminaries/#applications","text":"This section describes how to obtain source code and prepared TouchCORE models for the study objects.","title":"Applications"},{"location":"preliminaries/#source-code","text":"For the upcoming two tasks you will need prepared source code to work on. Prepare a dedicated folder for your tasks, e.g. on your Desktop. Clone these three repositories, but do not yet inspect their content: The Zoo : git clone https://github.com/kartoffelquadrat/Zoo.git The Book Store : git clone https://github.com/kartoffelquadrat/BookStoreInternals.git Tic Tac Toe : git clone https://github.com/kartoffelquadrat/XoxInternals.git You should now have three new directories in your study folder: Finally, for each folder, verify you can build the code as is: Open a terminal / command line in the project folder. Run: mvn clean install Verify there are no error messages printed to screen. All code you are working with in this study is open source, and you are welcome to share and redistribute it, beyond the context of this study. However, whatever published should always reference and give credit to the original source and authors.","title":"Source Code"},{"location":"preliminaries/#intellij-import-test","text":"Let's verify that you can open and run the test source code with IntelliJ: Start IntelliJ. Use the \" Open \" option to get to the selection dialogue: Select the cloned project root folder, then click the \" Open \" button: Verify you can start the \"Zoo\". Open the DesktopLauncher class and click the green triangle, left of the code: Verify there is sample zoo text output, no error messages. Close IntelliJ again. If everything worked as expected you may now proceed to your first task.","title":"IntelliJ Import Test"},{"location":"task1/","text":"Task 1 Your first task is the conversion of Tic Tac Toe into a RESTful service. Instructions All you need to do is replicate the steps shown on the Illustrations page for the requested app. Please now run a manual conversion of Tic Tac Toe into a RESTful service. Legacy Application Details Below diagram highlights classes and methods of the legacy Tic Tac Toe application , relevant to your RESTification task. For more information on theses methods, also consult the Tic Tac Toe online documentation . Interface Description: Tic Tac Toe Resources and Methods Your interface should begin with a top-level resource \" xox \", offering two methods. A [GET] request to the \" xox \" resource should result in a lookup of all currently running games, as a list of game-identifiers. A [POST] request to the \" xox \" resource should allow adding of a new game instance. The identifier is generated on server side and does not need to be provided, however the request body should provide all parameters required as game settings. The \" xox \" resource should possess a dynamic placeholder subresource, representing individual game instances by identifier. A [GET] request on the identifier placeholder resource should retrieve scoring information for the targeted game. A [DELETE] request on the identifier placeholder resource should remove the game from the list of all games. The dynamic resource representing games by their identifier should have two subresources: \" players \" and \" board \". A [GET] request on the \" players \" resource should return a list of player names involved into the specified game. The game instance is in this case provided by value of the parent placeholder resource. A [GET] request on the \" board \" resource should return a snapshot of the current game board layout, is to say which cells empty or occupied by a given player. The game instance is in this case provided by value of the parent placeholder resource. The \" players \" resource should possess a dynamic placeholder resource, encoding the name of a given player. This resource has no methods, but in its turn a subresource \" actions \". A [GET] request on actions should return an array of possible actions for a given player in a given game. Each action represents the claim of an available field. The required player name is provided by the parent dynamic resource representing a player name and the game instance is provided by the value of the dynamic sub resource of the root resource. The \" actions \" resource should possess a dynamic placeholder resource that serves to identify the a specific selection of the actions available to a given player in a given game. A [POST] request on that dynamic placeholder resource should allow the selection of a given action, to perform it. The precise action is then identified by an int value taken by the dynamic resource, representing the position in the array of all possible actions. The required player name is provided by the parent dynamic resource representing a player name and the game instance is provided by the value of the dynamic sub resource of the root resource. Click here to download interface description as file. Troubleshoot Q : I open the project with IntelliJ, but everything is underlined in red. A : The projet was not correctly opened. There are multiple potential fixes: Option 1) Reload pom.xml : Right click the file, then select Maven -> Reload Project . Option 2) Verify the JDK version: Select File -> Project Structure... . Verify 11.0.5 is selected in the Project and SDKs tab: Option 3) Invalidate IntelliJ caches: Select File -> Invalidate Caches... . Then select the first two checkboxes: Option 4) Delete the cloned folder, clone the repository again, then make sure to open the project exactly as shown . Q : I cannot compile / run the project, the green button is greyed out. A : The project has no launch configuration by default, therefore the arrow in the top bar is not available. Open the RestLauncher class instead and click on one of the green triangles, left of the code. Q : I RESTified the application, but when I start it there is a Nullpointer-Exception. A : Most likely the constructor code in one of the classes annotated with @RestController invokes a call to an @Autowired field. Autowiring is only available after class initialization (after the constructor). Do not call any method with access to autowired fields in a constructor. Instead tell spring to call it after class initialization. Use the @PostConstruct annotation. See @PostConstruct . Q : I've made a mistake on project import, how can I start from scratch? Delete the cloned folder, clone the repository again, then make sure to open the project exactly as shown . Q : I've modified the pom.xml file as shown, but IntelliJ still does not seem to know about Spring. A : Sometimes the changes made to the pom.xml are not automatically detected. (See first question, pom.xml reload```.) Q : IntelliJ asks me whether I want to trust the project sources. Should I? A : Yes. This is just a security mechanism to prevent malicious code being executed on project import. The provided sources are all from us and can be trusted.","title":"Task 1 - Tic Tac Toe"},{"location":"task1/#task-1","text":"Your first task is the conversion of Tic Tac Toe into a RESTful service.","title":"Task 1"},{"location":"task1/#instructions","text":"All you need to do is replicate the steps shown on the Illustrations page for the requested app. Please now run a manual conversion of Tic Tac Toe into a RESTful service.","title":"Instructions"},{"location":"task1/#legacy-application-details","text":"Below diagram highlights classes and methods of the legacy Tic Tac Toe application , relevant to your RESTification task. For more information on theses methods, also consult the Tic Tac Toe online documentation .","title":"Legacy Application Details"},{"location":"task1/#interface-description-tic-tac-toe-resources-and-methods","text":"Your interface should begin with a top-level resource \" xox \", offering two methods. A [GET] request to the \" xox \" resource should result in a lookup of all currently running games, as a list of game-identifiers. A [POST] request to the \" xox \" resource should allow adding of a new game instance. The identifier is generated on server side and does not need to be provided, however the request body should provide all parameters required as game settings. The \" xox \" resource should possess a dynamic placeholder subresource, representing individual game instances by identifier. A [GET] request on the identifier placeholder resource should retrieve scoring information for the targeted game. A [DELETE] request on the identifier placeholder resource should remove the game from the list of all games. The dynamic resource representing games by their identifier should have two subresources: \" players \" and \" board \". A [GET] request on the \" players \" resource should return a list of player names involved into the specified game. The game instance is in this case provided by value of the parent placeholder resource. A [GET] request on the \" board \" resource should return a snapshot of the current game board layout, is to say which cells empty or occupied by a given player. The game instance is in this case provided by value of the parent placeholder resource. The \" players \" resource should possess a dynamic placeholder resource, encoding the name of a given player. This resource has no methods, but in its turn a subresource \" actions \". A [GET] request on actions should return an array of possible actions for a given player in a given game. Each action represents the claim of an available field. The required player name is provided by the parent dynamic resource representing a player name and the game instance is provided by the value of the dynamic sub resource of the root resource. The \" actions \" resource should possess a dynamic placeholder resource that serves to identify the a specific selection of the actions available to a given player in a given game. A [POST] request on that dynamic placeholder resource should allow the selection of a given action, to perform it. The precise action is then identified by an int value taken by the dynamic resource, representing the position in the array of all possible actions. The required player name is provided by the parent dynamic resource representing a player name and the game instance is provided by the value of the dynamic sub resource of the root resource. Click here to download interface description as file.","title":"Interface Description: Tic Tac Toe Resources and Methods"},{"location":"task1/#troubleshoot","text":"Q : I open the project with IntelliJ, but everything is underlined in red. A : The projet was not correctly opened. There are multiple potential fixes: Option 1) Reload pom.xml : Right click the file, then select Maven -> Reload Project . Option 2) Verify the JDK version: Select File -> Project Structure... . Verify 11.0.5 is selected in the Project and SDKs tab: Option 3) Invalidate IntelliJ caches: Select File -> Invalidate Caches... . Then select the first two checkboxes: Option 4) Delete the cloned folder, clone the repository again, then make sure to open the project exactly as shown . Q : I cannot compile / run the project, the green button is greyed out. A : The project has no launch configuration by default, therefore the arrow in the top bar is not available. Open the RestLauncher class instead and click on one of the green triangles, left of the code. Q : I RESTified the application, but when I start it there is a Nullpointer-Exception. A : Most likely the constructor code in one of the classes annotated with @RestController invokes a call to an @Autowired field. Autowiring is only available after class initialization (after the constructor). Do not call any method with access to autowired fields in a constructor. Instead tell spring to call it after class initialization. Use the @PostConstruct annotation. See @PostConstruct . Q : I've made a mistake on project import, how can I start from scratch? Delete the cloned folder, clone the repository again, then make sure to open the project exactly as shown . Q : I've modified the pom.xml file as shown, but IntelliJ still does not seem to know about Spring. A : Sometimes the changes made to the pom.xml are not automatically detected. (See first question, pom.xml reload```.) Q : IntelliJ asks me whether I want to trust the project sources. Should I? A : Yes. This is just a security mechanism to prevent malicious code being executed on project import. The provided sources are all from us and can be trusted.","title":"Troubleshoot"},{"location":"task2/","text":"Task 2 Your second task is the conversion of the BookStore into a RESTful service. Instructions All you need to do is replicate the steps shown on the Illustrations page for the requested app. Please now run a manual conversion of the BookStore into a RESTful service. Legacy Application Details Below diagram highlights classes and methods of the legacy Book Store application , relevant to your RESTification task. For more information on theses methods, also consult the Book Store online documentation . Interface Description: Book Store Resources and Methods Your interface should begin with a top-level resource \" bookstore \", not offering any methods. \" bookstore \" has two subresources, \" isbns \" and \" stocklocations \", both offering a [GET] method. A [GET] request to \"isbns\" should result in a listing of all isbn numbers stored in the system. A [GET] request to \" stocklocations \" should result in a listing of all geographic store locations. The \" isbns \" resource should have a single dynamic placeholder subresource representing an isbn number, A [GET] request to the dynamic placeholder subresource should provide details on a given book, identified by isbn number which serves as input parameter. A [PUT] request to the dynamic placeholder subresource should allow adding a new book to the system. All details on the book are passed as request body payload. (Note: This might look a bit peculiar to not use the value of the dynamic placeholder \"isbn\" for a subsequent mapping. That is ok here, because the required ISBN information is also contained in the body payload object. We do not want you to add any additional validation here, to keep things simple.) The dynamic placeholder resource should have a child resource \" comments \", representing comments for a given book, identified by isbn. The value of the parent placeholder resource determines which book is targeted. A [GET] request to the \" comments \" resource should result in a listing of all comments for the specified book. The value of the parent resource representing an isbn number servers as input parameter. The result should index comments by their id. A [POST] request to the \" comments \" resource should allow the creation of new comments. The id of the new comment is generated on server side and not required, however, again the parent placeholder resource encodes the isbn of the targeted book. The comment itself is to be transmitted as request body payload. A [DELETE] request to the \" comments \" resource should delete all comments for a given book, identified by the isbn number of the parent dynamic placeholder resource. The \" comments resource should have a dynamic subresource representing a specific comment by id. It offers two methods: [POST] and [DELETE] . A [POST] request to specific comment should allow to alter the content of that comment. Target book and target comment are respectively identified by the dynamic resource itself and the corresponding grandparent placeholder resource. Similar to comment creation, the new comment content is tranmitted as request body payload. A [DELETE] request to specific comment should allow removal of an existing comment. Target book and target comment are respectively identified by the dynamic resource itself and the corresponding grandparent placeholder resource. The \"stocklocations\" resource shoud have a dynamic subresource representing a specific geographic location (city name). A [GET] request to a specific location should return the exact amount of book copies in stock for the given location, as a map indexed by isbn number. The path variable itself providing the target location can serve as argument for a corresponding method call. Finally, the dynamic resource representing a specific geographic location should itself have a dynamic subresource representing the stock for a given book at the given location. A [GET] request on this dynamic resource should return the amount of copies in stock for a book specified by isbn (the value of this placeholder resources) and stock location (the value of this resource's parent placeholder resource) A [POST] request on this dynamic resource should update the current amount of copies for a given book. Target location and isbn are likewise encoded by this placeholder resource and its parent placeholder resource. The new amount is provided as request body payload. Click here to download interface description as file. Troubleshoot Q : I open the project with IntelliJ, but everything is underlined in red. A : The projet was not correctly opened. There are multiple potential fixes: Option 1) Reload pom.xml : Right click the file, then select Maven -> Reload Project . Option 2) Verify the JDK version: Select File -> Project Structure... . Verify 11.0.5 is selected in the Project and SDKs tab: Option 3) Invalidate IntelliJ caches: Select File -> Invalidate Caches... . Then select the first two checkboxes: Option 4) Delete the cloned folder, clone the repository again, then make sure to open the project exactly as shown . Q : I cannot compile / run the project, the green button is greyed out. A : The project has no launch configuration by default, therefore the arrow in the top bar is not available. Open the RestLauncher class instead and click on one of the green triangles, left of the code. Q : I RESTified the application, but when I start it there is a Nullpointer-Exception. A : Most likely the constructor code in one of the classes annotated with @RestController invokes a call to an @Autowired field. Autowiring is only available after class initialization (after the constructor). Do not call any method with access to autowired fields in a constructor. Instead tell spring to call it after class initialization. Use the @PostConstruct annotation. See @PostConstruct . Q : I've made a mistake on project import, how can I start from scratch? Delete the cloned folder, clone the repository again, then make sure to open the project exactly as shown . Q : I've modified the pom.xml file as shown, but IntelliJ still does not seem to know about Spring. A : Sometimes the changes made to the pom.xml are not automatically detected. (See first question, pom.xml reload```.) Q : IntelliJ asks me whether I want to trust the project sources. Should I? A : Yes. This is just a security mechanism to prevent malicious code being executed on project import. The provided sources are all from us and can be trusted.","title":"Task 2 - Book Store"},{"location":"task2/#task-2","text":"Your second task is the conversion of the BookStore into a RESTful service.","title":"Task 2"},{"location":"task2/#instructions","text":"All you need to do is replicate the steps shown on the Illustrations page for the requested app. Please now run a manual conversion of the BookStore into a RESTful service.","title":"Instructions"},{"location":"task2/#legacy-application-details","text":"Below diagram highlights classes and methods of the legacy Book Store application , relevant to your RESTification task. For more information on theses methods, also consult the Book Store online documentation .","title":"Legacy Application Details"},{"location":"task2/#interface-description-book-store-resources-and-methods","text":"Your interface should begin with a top-level resource \" bookstore \", not offering any methods. \" bookstore \" has two subresources, \" isbns \" and \" stocklocations \", both offering a [GET] method. A [GET] request to \"isbns\" should result in a listing of all isbn numbers stored in the system. A [GET] request to \" stocklocations \" should result in a listing of all geographic store locations. The \" isbns \" resource should have a single dynamic placeholder subresource representing an isbn number, A [GET] request to the dynamic placeholder subresource should provide details on a given book, identified by isbn number which serves as input parameter. A [PUT] request to the dynamic placeholder subresource should allow adding a new book to the system. All details on the book are passed as request body payload. (Note: This might look a bit peculiar to not use the value of the dynamic placeholder \"isbn\" for a subsequent mapping. That is ok here, because the required ISBN information is also contained in the body payload object. We do not want you to add any additional validation here, to keep things simple.) The dynamic placeholder resource should have a child resource \" comments \", representing comments for a given book, identified by isbn. The value of the parent placeholder resource determines which book is targeted. A [GET] request to the \" comments \" resource should result in a listing of all comments for the specified book. The value of the parent resource representing an isbn number servers as input parameter. The result should index comments by their id. A [POST] request to the \" comments \" resource should allow the creation of new comments. The id of the new comment is generated on server side and not required, however, again the parent placeholder resource encodes the isbn of the targeted book. The comment itself is to be transmitted as request body payload. A [DELETE] request to the \" comments \" resource should delete all comments for a given book, identified by the isbn number of the parent dynamic placeholder resource. The \" comments resource should have a dynamic subresource representing a specific comment by id. It offers two methods: [POST] and [DELETE] . A [POST] request to specific comment should allow to alter the content of that comment. Target book and target comment are respectively identified by the dynamic resource itself and the corresponding grandparent placeholder resource. Similar to comment creation, the new comment content is tranmitted as request body payload. A [DELETE] request to specific comment should allow removal of an existing comment. Target book and target comment are respectively identified by the dynamic resource itself and the corresponding grandparent placeholder resource. The \"stocklocations\" resource shoud have a dynamic subresource representing a specific geographic location (city name). A [GET] request to a specific location should return the exact amount of book copies in stock for the given location, as a map indexed by isbn number. The path variable itself providing the target location can serve as argument for a corresponding method call. Finally, the dynamic resource representing a specific geographic location should itself have a dynamic subresource representing the stock for a given book at the given location. A [GET] request on this dynamic resource should return the amount of copies in stock for a book specified by isbn (the value of this placeholder resources) and stock location (the value of this resource's parent placeholder resource) A [POST] request on this dynamic resource should update the current amount of copies for a given book. Target location and isbn are likewise encoded by this placeholder resource and its parent placeholder resource. The new amount is provided as request body payload. Click here to download interface description as file.","title":"Interface Description: Book Store Resources and Methods"},{"location":"task2/#troubleshoot","text":"Q : I open the project with IntelliJ, but everything is underlined in red. A : The projet was not correctly opened. There are multiple potential fixes: Option 1) Reload pom.xml : Right click the file, then select Maven -> Reload Project . Option 2) Verify the JDK version: Select File -> Project Structure... . Verify 11.0.5 is selected in the Project and SDKs tab: Option 3) Invalidate IntelliJ caches: Select File -> Invalidate Caches... . Then select the first two checkboxes: Option 4) Delete the cloned folder, clone the repository again, then make sure to open the project exactly as shown . Q : I cannot compile / run the project, the green button is greyed out. A : The project has no launch configuration by default, therefore the arrow in the top bar is not available. Open the RestLauncher class instead and click on one of the green triangles, left of the code. Q : I RESTified the application, but when I start it there is a Nullpointer-Exception. A : Most likely the constructor code in one of the classes annotated with @RestController invokes a call to an @Autowired field. Autowiring is only available after class initialization (after the constructor). Do not call any method with access to autowired fields in a constructor. Instead tell spring to call it after class initialization. Use the @PostConstruct annotation. See @PostConstruct . Q : I've made a mistake on project import, how can I start from scratch? Delete the cloned folder, clone the repository again, then make sure to open the project exactly as shown . Q : I've modified the pom.xml file as shown, but IntelliJ still does not seem to know about Spring. A : Sometimes the changes made to the pom.xml are not automatically detected. (See first question, pom.xml reload```.) Q : IntelliJ asks me whether I want to trust the project sources. Should I? A : Yes. This is just a security mechanism to prevent malicious code being executed on project import. The provided sources are all from us and can be trusted.","title":"Troubleshoot"},{"location":"test/","text":"Tests At this point you should have two RESTful services, Tic Tac Toe and the Book Store . Now let's check if your RESTful API is compliant to the description. This is easy to motivate - let's just assume you were responsible for the server part, while some other team pf developers coded a mobile app in the meantime, that will communicate with your REST API. There are tow test repositories that send a probe request to each of your endpoint and validate if your server behaves the way it should. To run them, First start up your service. Then with your service still running , start the test program. Test Sources Zoo (for completenes): https://github.com/kartoffelquadrat/ZooRestTest Xox: https://github.com/kartoffelquadrat/XoxStudyRestTest BookStore: https://github.com/kartoffelquadrat/BookStoreRestTest Test Run Clone the repo: git clone ... Go into the cloned directory: cd ... Run the Tests: mvn clean test Go to the end of the printed output, verify all tests have passes / fix the one that did not pass.:w","title":"Tests"},{"location":"test/#tests","text":"At this point you should have two RESTful services, Tic Tac Toe and the Book Store . Now let's check if your RESTful API is compliant to the description. This is easy to motivate - let's just assume you were responsible for the server part, while some other team pf developers coded a mobile app in the meantime, that will communicate with your REST API. There are tow test repositories that send a probe request to each of your endpoint and validate if your server behaves the way it should. To run them, First start up your service. Then with your service still running , start the test program.","title":"Tests"},{"location":"test/#test-sources","text":"Zoo (for completenes): https://github.com/kartoffelquadrat/ZooRestTest Xox: https://github.com/kartoffelquadrat/XoxStudyRestTest BookStore: https://github.com/kartoffelquadrat/BookStoreRestTest","title":"Test Sources"},{"location":"test/#test-run","text":"Clone the repo: git clone ... Go into the cloned directory: cd ... Run the Tests: mvn clean test Go to the end of the printed output, verify all tests have passes / fix the one that did not pass.:w","title":"Test Run"}]}